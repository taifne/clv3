// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: src/modules/user/proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "userservice";

export interface User {
  id: number;
  username: string;
  email: string;
  comments: number;
  createdAt: Date | undefined;
}

export interface CreateUserRequest {
  username: string;
  email: string;
}

export interface CreateUserResponse {
  user: User | undefined;
}

export interface GetUserRequest {
  id: number;
}

export interface GetUserResponse {
  user: User | undefined;
}

export interface UpdateUserRequest {
  id: number;
  username: string;
  email: string;
}

export interface UpdateUserResponse {
  user: User | undefined;
}

export interface DeleteUserRequest {
  id: number;
}

export interface DeleteUserResponse {
  message: string;
}

export interface FindAllRequest {
}

export interface FindAllResponse {
  users: User[];
}

export interface Users {
  users: User[];
}

export const USERSERVICE_PACKAGE_NAME = "userservice";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface UserServiceClient {
  findOne(request: GetUserRequest): Observable<User>;

  create(request: CreateUserRequest): Observable<CreateUserResponse>;

  findAll(request: FindAllRequest): Observable<FindAllResponse>;

  update(request: UpdateUserRequest): Observable<UpdateUserResponse>;

  remove(request: DeleteUserRequest): Observable<DeleteUserResponse>;
}

export interface UserServiceController {
  findOne(request: GetUserRequest): Promise<User> | Observable<User> | User;

  create(request: CreateUserRequest): Promise<CreateUserResponse> | Observable<CreateUserResponse> | CreateUserResponse;

  findAll(request: FindAllRequest): Promise<FindAllResponse> | Observable<FindAllResponse> | FindAllResponse;

  update(request: UpdateUserRequest): Promise<UpdateUserResponse> | Observable<UpdateUserResponse> | UpdateUserResponse;

  remove(request: DeleteUserRequest): Promise<DeleteUserResponse> | Observable<DeleteUserResponse> | DeleteUserResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findOne", "create", "findAll", "update", "remove"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
