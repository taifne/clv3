// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: src/modules/post/proto/post.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "postservice";

export interface Post {
  id: number;
  title: string;
  content: string;
  createdAt: Date | undefined;
}

export interface CreatePostRequest {
  title: string;
  content: string;
}

export interface CreatePostResponse {
  post: Post | undefined;
}

export interface GetPostRequest {
  id: number;
}

export interface GetPostResponse {
  post: Post | undefined;
}

export interface ListPostsRequest {
}

export interface ListPostsResponse {
  posts: Post[];
}

export const POSTSERVICE_PACKAGE_NAME = "postservice";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface PostServiceClient {
  createPost(request: CreatePostRequest): Observable<CreatePostResponse>;

  getPost(request: GetPostRequest): Observable<GetPostResponse>;

  listPosts(request: ListPostsRequest): Observable<ListPostsResponse>;
}

export interface PostServiceController {
  createPost(
    request: CreatePostRequest,
  ): Promise<CreatePostResponse> | Observable<CreatePostResponse> | CreatePostResponse;

  getPost(request: GetPostRequest): Promise<GetPostResponse> | Observable<GetPostResponse> | GetPostResponse;

  listPosts(request: ListPostsRequest): Promise<ListPostsResponse> | Observable<ListPostsResponse> | ListPostsResponse;
}

export function PostServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createPost", "getPost", "listPosts"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PostService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PostService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const POST_SERVICE_NAME = "PostService";
