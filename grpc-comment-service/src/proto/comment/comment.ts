// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: src/modules/comment/proto/comment.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "comment";

export interface Comment {
  id: number;
  content: string;
  parentId: number;
  post: number;
  user: number;
  replies: Comment[];
  likes: number[];
  createdAt: Date | undefined;
  deletedAt: Date | undefined;
}

export interface CreateCommentRequest {
  content: string;
  parentId: number;
  postId: number;
  userId: number;
}

export interface FindAllCommentsRequest {
  page: number;
  limit: number;
  sortBy: string;
  sortOrder: string;
  filter: string;
}

export interface FindOneCommentRequest {
  id: number;
}

export interface FindCommentsByPostIdRequest {
  postId: number;
}

export interface UpdateCommentRequest {
  id: number;
  content: string;
  parentId: number;
  postId: number;
  userId: number;
}

export interface RemoveCommentRequest {
  id: number;
}

export interface CommentResponse {
  comment: Comment | undefined;
}

export interface CommentListResponse {
  comments: Comment[];
}

export interface RemoveCommentResponse {
  message: string;
}

export const COMMENT_PACKAGE_NAME = "comment";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface CommentsServiceClient {
  createComment(request: CreateCommentRequest): Observable<CommentResponse>;

  findAllComments(request: FindAllCommentsRequest): Observable<CommentListResponse>;

  findOneComment(request: FindOneCommentRequest): Observable<CommentResponse>;

  findCommentsByPostId(request: FindCommentsByPostIdRequest): Observable<CommentListResponse>;

  updateComment(request: UpdateCommentRequest): Observable<CommentResponse>;

  removeComment(request: RemoveCommentRequest): Observable<RemoveCommentResponse>;
}

export interface CommentsServiceController {
  createComment(
    request: CreateCommentRequest,
  ): Promise<CommentResponse> | Observable<CommentResponse> | CommentResponse;

  findAllComments(
    request: FindAllCommentsRequest,
  ): Promise<CommentListResponse> | Observable<CommentListResponse> | CommentListResponse;

  findOneComment(
    request: FindOneCommentRequest,
  ): Promise<CommentResponse> | Observable<CommentResponse> | CommentResponse;

  findCommentsByPostId(
    request: FindCommentsByPostIdRequest,
  ): Promise<CommentListResponse> | Observable<CommentListResponse> | CommentListResponse;

  updateComment(
    request: UpdateCommentRequest,
  ): Promise<CommentResponse> | Observable<CommentResponse> | CommentResponse;

  removeComment(
    request: RemoveCommentRequest,
  ): Promise<RemoveCommentResponse> | Observable<RemoveCommentResponse> | RemoveCommentResponse;
}

export function CommentsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createComment",
      "findAllComments",
      "findOneComment",
      "findCommentsByPostId",
      "updateComment",
      "removeComment",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CommentsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CommentsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const COMMENTS_SERVICE_NAME = "CommentsService";
